/***************************************************************************************
*    Copyright © 2023 OdnetninI                                                        *
*                                                                                      *
*    Permission is hereby granted, free of charge, to any person obtaining a copy of   *
*    this software and associated documentation files (the “Software”), to deal in     *
*    the Software without restriction, including without limitation the rights to      *
*    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies     *
*    of the Software, and to permit persons to whom the Software is furnished to do    *
*    so, subject to the following conditions:                                          *
*                                                                                      *
*    The above copyright notice and this permission notice shall be included in all    *
*    copies or substantial portions of the Software.                                   *
*                                                                                      *
*    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR        *
*    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,          *
*    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE       *
*    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *
*    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN   *
*    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
****************************************************************************************/

typedef bool inst_function();

inst_function *instructions[0x100] = {
    inst_break,
    inst_mul_r0_imm,
    inst_mul_r0_r1,
    inst_div_r0_imm,
    inst_div_r0_r1,
    inst_ret,
    inst_syscall,
    inst_mix,
    inst_nop,
    inst_mov_sp_imm,
    inst_mov_r0_sp,
    inst_mov_r1_sp,
    inst_unmix,
    inst_illegal_0d,
    inst_sll,
    inst_slr,
    inst_mov_r0_imm,
    inst_mov_r1_imm,
    inst_mov_r2_imm,
    inst_mov_r3_imm,
    inst_illegal_14,
    inst_illegal_15,
    inst_illegal_16,
    inst_illegal_17,
    inst_illegal_18,
    inst_illegal_19,
    inst_illegal_1a,
    inst_illegal_1b,
    inst_illegal_1c,
    inst_illegal_1d,
    inst_illegal_1e,
    inst_illegal_1f,
    inst_mov_r0_r0,
    inst_mov_r0_r1,
    inst_mov_r0_r2,
    inst_mov_r0_r3,
    inst_mov_r1_r0,
    inst_mov_r1_r1,
    inst_mov_r1_r2,
    inst_mov_r1_r3,
    inst_mov_r2_r0,
    inst_mov_r2_r1,
    inst_mov_r2_r2,
    inst_mov_r2_r3,
    inst_mov_r3_r0,
    inst_mov_r3_r1,
    inst_mov_r3_r2,
    inst_mov_r3_r3,
    inst_add_r0_r0,
    inst_add_r0_r1,
    inst_add_r0_r2,
    inst_add_r0_r3,
    inst_add_r1_r0,
    inst_add_r1_r1,
    inst_add_r1_r2,
    inst_add_r1_r3,
    inst_add_r2_r0,
    inst_add_r2_r1,
    inst_add_r2_r2,
    inst_add_r2_r3,
    inst_add_r3_r0,
    inst_add_r3_r1,
    inst_add_r3_r2,
    inst_add_r3_r3,
    inst_mov_r0_m0,
    inst_mov_r0_m1,
    inst_mov_r0_m2,
    inst_mov_r0_m3,
    inst_mov_r1_m0,
    inst_mov_r1_m1,
    inst_mov_r1_m2,
    inst_mov_r1_m3,
    inst_mov_r2_m0,
    inst_mov_r2_m1,
    inst_mov_r2_m2,
    inst_mov_r2_m3,
    inst_mov_r3_m0,
    inst_mov_r3_m1,
    inst_mov_r3_m2,
    inst_mov_r3_m3,
    inst_mov_r0_w0,
    inst_mov_r0_w1,
    inst_mov_r0_w2,
    inst_mov_r0_w3,
    inst_mov_r1_w0,
    inst_mov_r1_w1,
    inst_mov_r1_w2,
    inst_mov_r1_w3,
    inst_mov_r2_w0,
    inst_mov_r2_w1,
    inst_mov_r2_w2,
    inst_mov_r2_w3,
    inst_mov_r3_w0,
    inst_mov_r3_w1,
    inst_mov_r3_w2,
    inst_mov_r3_w3,
    inst_mov_m0_r0,
    inst_mov_m0_r1,
    inst_mov_m0_r2,
    inst_mov_m0_r3,
    inst_mov_m1_r0,
    inst_mov_m1_r1,
    inst_mov_m1_r2,
    inst_mov_m1_r3,
    inst_mov_m2_r0,
    inst_mov_m2_r1,
    inst_mov_m2_r2,
    inst_mov_m2_r3,
    inst_mov_m3_r0,
    inst_mov_m3_r1,
    inst_mov_m3_r2,
    inst_mov_m3_r3,
    inst_mov_w0_r0,
    inst_mov_w0_r1,
    inst_mov_w0_r2,
    inst_mov_w0_r3,
    inst_mov_w1_r0,
    inst_mov_w1_r1,
    inst_mov_w1_r2,
    inst_mov_w1_r3,
    inst_mov_w2_r0,
    inst_mov_w2_r1,
    inst_mov_w2_r2,
    inst_mov_w2_r3,
    inst_mov_w3_r0,
    inst_mov_w3_r1,
    inst_mov_w3_r2,
    inst_mov_w3_r3,
    inst_cmp_r0_r0,
    inst_cmp_r0_r1,
    inst_cmp_r0_r2,
    inst_cmp_r0_r3,
    inst_cmp_r1_r0,
    inst_cmp_r1_r1,
    inst_cmp_r1_r2,
    inst_cmp_r1_r3,
    inst_cmp_r2_r0,
    inst_cmp_r2_r1,
    inst_cmp_r2_r2,
    inst_cmp_r2_r3,
    inst_cmp_r3_r0,
    inst_cmp_r3_r1,
    inst_cmp_r3_r2,
    inst_cmp_r3_r3,
    inst_push_r0,
    inst_push_r1,
    inst_push_r2,
    inst_push_r3,
    inst_pop_r0,
    inst_pop_r1,
    inst_pop_r2,
    inst_pop_r3,
    inst_jump_imm,
    inst_call_imm,
    inst_jlt_imm,
    inst_jgt_imm,
    inst_jeq_imm,
    inst_jne_imm,
    inst_clt_imm,
    inst_cgt_imm,
    inst_ceq_imm,
    inst_cne_imm,
    inst_cmp_r0_imm,
    inst_cmp_r1_imm,
    inst_cmp_r2_imm,
    inst_cmp_r3_imm,
    inst_push_sp,
    inst_push_pc,
    inst_inc_r0,
    inst_inc_r1,
    inst_inc_r2,
    inst_inc_r3,
    inst_dec_r0,
    inst_dec_r1,
    inst_dec_r2,
    inst_dec_r3,
    inst_mov_r0_mimm,
    inst_mov_r1_mimm,
    inst_mov_r2_mimm,
    inst_mov_r3_mimm,
    inst_mov_r0_wimm,
    inst_mov_r1_wimm,
    inst_mov_r2_wimm,
    inst_mov_r3_wimm,
    inst_mov_mimm_r0,
    inst_mov_mimm_r1,
    inst_mov_mimm_r2,
    inst_mov_mimm_r3,
    inst_mov_wimm_r0,
    inst_mov_wimm_r1,
    inst_mov_wimm_r2,
    inst_mov_wimm_r3,
    inst_illegal_c0,
    inst_illegal_c1,
    inst_illegal_c2,
    inst_illegal_c3,
    inst_push_imm,
    inst_jump_r0,
    inst_jump_r1,
    inst_jump_r2,
    inst_jump_r3,
    inst_call_r0,
    inst_call_r1,
    inst_call_r2,
    inst_call_r3,
    inst_and_r0_imm,
    inst_or_r0_imm,
    inst_xor_r0_imm,
    inst_and_r0_r0,
    inst_and_r0_r1,
    inst_and_r0_r2,
    inst_and_r0_r3,
    inst_or_r0_r0,
    inst_or_r0_r1,
    inst_or_r0_r2,
    inst_or_r0_r3,
    inst_xor_r0_r0,
    inst_xor_r0_r1,
    inst_xor_r0_r2,
    inst_xor_r0_r3,
    inst_swap_r0,
    inst_swap_r1,
    inst_swap_r2,
    inst_swap_r3,
    inst_add_r0_imm,
    inst_add_r1_imm,
    inst_add_r2_imm,
    inst_add_r3_imm,
    inst_illegal_e4,
    inst_illegal_e5,
    inst_illegal_e6,
    inst_illegal_e7,
    inst_illegal_e8,
    inst_illegal_e9,
    inst_illegal_ea,
    inst_illegal_eb,
    inst_illegal_ec,
    inst_illegal_ed,
    inst_illegal_ee,
    inst_illegal_ef,
    inst_illegal_f0,
    inst_illegal_f1,
    inst_illegal_f2,
    inst_illegal_f3,
    inst_illegal_f4,
    inst_illegal_f5,
    inst_illegal_f6,
    inst_illegal_f7,
    inst_illegal_f8,
    inst_illegal_f9,
    inst_illegal_fa,
    inst_illegal_fb,
    inst_illegal_fc,
    inst_illegal_fd,
    inst_illegal_fe,
    inst_illegal_ff
};
inst_function * const original_instructions[0x100] = {
    inst_break,
    inst_mul_r0_imm,
    inst_mul_r0_r1,
    inst_div_r0_imm,
    inst_div_r0_r1,
    inst_ret,
    inst_syscall,
    inst_mix,
    inst_nop,
    inst_mov_sp_imm,
    inst_mov_r0_sp,
    inst_mov_r1_sp,
    inst_unmix,
    inst_illegal_0d,
    inst_sll,
    inst_slr,
    inst_mov_r0_imm,
    inst_mov_r1_imm,
    inst_mov_r2_imm,
    inst_mov_r3_imm,
    inst_illegal_14,
    inst_illegal_15,
    inst_illegal_16,
    inst_illegal_17,
    inst_illegal_18,
    inst_illegal_19,
    inst_illegal_1a,
    inst_illegal_1b,
    inst_illegal_1c,
    inst_illegal_1d,
    inst_illegal_1e,
    inst_illegal_1f,
    inst_mov_r0_r0,
    inst_mov_r0_r1,
    inst_mov_r0_r2,
    inst_mov_r0_r3,
    inst_mov_r1_r0,
    inst_mov_r1_r1,
    inst_mov_r1_r2,
    inst_mov_r1_r3,
    inst_mov_r2_r0,
    inst_mov_r2_r1,
    inst_mov_r2_r2,
    inst_mov_r2_r3,
    inst_mov_r3_r0,
    inst_mov_r3_r1,
    inst_mov_r3_r2,
    inst_mov_r3_r3,
    inst_add_r0_r0,
    inst_add_r0_r1,
    inst_add_r0_r2,
    inst_add_r0_r3,
    inst_add_r1_r0,
    inst_add_r1_r1,
    inst_add_r1_r2,
    inst_add_r1_r3,
    inst_add_r2_r0,
    inst_add_r2_r1,
    inst_add_r2_r2,
    inst_add_r2_r3,
    inst_add_r3_r0,
    inst_add_r3_r1,
    inst_add_r3_r2,
    inst_add_r3_r3,
    inst_mov_r0_m0,
    inst_mov_r0_m1,
    inst_mov_r0_m2,
    inst_mov_r0_m3,
    inst_mov_r1_m0,
    inst_mov_r1_m1,
    inst_mov_r1_m2,
    inst_mov_r1_m3,
    inst_mov_r2_m0,
    inst_mov_r2_m1,
    inst_mov_r2_m2,
    inst_mov_r2_m3,
    inst_mov_r3_m0,
    inst_mov_r3_m1,
    inst_mov_r3_m2,
    inst_mov_r3_m3,
    inst_mov_r0_w0,
    inst_mov_r0_w1,
    inst_mov_r0_w2,
    inst_mov_r0_w3,
    inst_mov_r1_w0,
    inst_mov_r1_w1,
    inst_mov_r1_w2,
    inst_mov_r1_w3,
    inst_mov_r2_w0,
    inst_mov_r2_w1,
    inst_mov_r2_w2,
    inst_mov_r2_w3,
    inst_mov_r3_w0,
    inst_mov_r3_w1,
    inst_mov_r3_w2,
    inst_mov_r3_w3,
    inst_mov_m0_r0,
    inst_mov_m0_r1,
    inst_mov_m0_r2,
    inst_mov_m0_r3,
    inst_mov_m1_r0,
    inst_mov_m1_r1,
    inst_mov_m1_r2,
    inst_mov_m1_r3,
    inst_mov_m2_r0,
    inst_mov_m2_r1,
    inst_mov_m2_r2,
    inst_mov_m2_r3,
    inst_mov_m3_r0,
    inst_mov_m3_r1,
    inst_mov_m3_r2,
    inst_mov_m3_r3,
    inst_mov_w0_r0,
    inst_mov_w0_r1,
    inst_mov_w0_r2,
    inst_mov_w0_r3,
    inst_mov_w1_r0,
    inst_mov_w1_r1,
    inst_mov_w1_r2,
    inst_mov_w1_r3,
    inst_mov_w2_r0,
    inst_mov_w2_r1,
    inst_mov_w2_r2,
    inst_mov_w2_r3,
    inst_mov_w3_r0,
    inst_mov_w3_r1,
    inst_mov_w3_r2,
    inst_mov_w3_r3,
    inst_cmp_r0_r0,
    inst_cmp_r0_r1,
    inst_cmp_r0_r2,
    inst_cmp_r0_r3,
    inst_cmp_r1_r0,
    inst_cmp_r1_r1,
    inst_cmp_r1_r2,
    inst_cmp_r1_r3,
    inst_cmp_r2_r0,
    inst_cmp_r2_r1,
    inst_cmp_r2_r2,
    inst_cmp_r2_r3,
    inst_cmp_r3_r0,
    inst_cmp_r3_r1,
    inst_cmp_r3_r2,
    inst_cmp_r3_r3,
    inst_push_r0,
    inst_push_r1,
    inst_push_r2,
    inst_push_r3,
    inst_pop_r0,
    inst_pop_r1,
    inst_pop_r2,
    inst_pop_r3,
    inst_jump_imm,
    inst_call_imm,
    inst_jlt_imm,
    inst_jgt_imm,
    inst_jeq_imm,
    inst_jne_imm,
    inst_clt_imm,
    inst_cgt_imm,
    inst_ceq_imm,
    inst_cne_imm,
    inst_cmp_r0_imm,
    inst_cmp_r1_imm,
    inst_cmp_r2_imm,
    inst_cmp_r3_imm,
    inst_push_sp,
    inst_push_pc,
    inst_inc_r0,
    inst_inc_r1,
    inst_inc_r2,
    inst_inc_r3,
    inst_dec_r0,
    inst_dec_r1,
    inst_dec_r2,
    inst_dec_r3,
    inst_mov_r0_mimm,
    inst_mov_r1_mimm,
    inst_mov_r2_mimm,
    inst_mov_r3_mimm,
    inst_mov_r0_wimm,
    inst_mov_r1_wimm,
    inst_mov_r2_wimm,
    inst_mov_r3_wimm,
    inst_mov_mimm_r0,
    inst_mov_mimm_r1,
    inst_mov_mimm_r2,
    inst_mov_mimm_r3,
    inst_mov_wimm_r0,
    inst_mov_wimm_r1,
    inst_mov_wimm_r2,
    inst_mov_wimm_r3,
    inst_illegal_c0,
    inst_illegal_c1,
    inst_illegal_c2,
    inst_illegal_c3,
    inst_push_imm,
    inst_jump_r0,
    inst_jump_r1,
    inst_jump_r2,
    inst_jump_r3,
    inst_call_r0,
    inst_call_r1,
    inst_call_r2,
    inst_call_r3,
    inst_and_r0_imm,
    inst_or_r0_imm,
    inst_xor_r0_imm,
    inst_and_r0_r0,
    inst_and_r0_r1,
    inst_and_r0_r2,
    inst_and_r0_r3,
    inst_or_r0_r0,
    inst_or_r0_r1,
    inst_or_r0_r2,
    inst_or_r0_r3,
    inst_xor_r0_r0,
    inst_xor_r0_r1,
    inst_xor_r0_r2,
    inst_xor_r0_r3,
    inst_swap_r0,
    inst_swap_r1,
    inst_swap_r2,
    inst_swap_r3,
    inst_add_r0_imm,
    inst_add_r1_imm,
    inst_add_r2_imm,
    inst_add_r3_imm,
    inst_illegal_e4,
    inst_illegal_e5,
    inst_illegal_e6,
    inst_illegal_e7,
    inst_illegal_e8,
    inst_illegal_e9,
    inst_illegal_ea,
    inst_illegal_eb,
    inst_illegal_ec,
    inst_illegal_ed,
    inst_illegal_ee,
    inst_illegal_ef,
    inst_illegal_f0,
    inst_illegal_f1,
    inst_illegal_f2,
    inst_illegal_f3,
    inst_illegal_f4,
    inst_illegal_f5,
    inst_illegal_f6,
    inst_illegal_f7,
    inst_illegal_f8,
    inst_illegal_f9,
    inst_illegal_fa,
    inst_illegal_fb,
    inst_illegal_fc,
    inst_illegal_fd,
    inst_illegal_fe,
    inst_illegal_ff
};
